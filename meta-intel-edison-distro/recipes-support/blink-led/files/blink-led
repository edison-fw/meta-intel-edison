#!/usr/bin/env python3

#
# Edison LED blinker
#
# Copyright (c) 2014, Intel Corporation.
# Fabien Chereau <fabien.chereau@intel.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# This is a very poor implementation as it uses subprocesses for init

import argparse
import sys
import gpiod

parser = argparse.ArgumentParser(description="Blink the Edison Arduino board LED.")
parser.add_argument("--frequency", type=float, default=4, help="blink frequency in Hz")
parser.add_argument("--duration",  type=float, default=-1, help="duration of the blink in seconds. Negative value means no timeout, i.e. it will stop when the program is killed.")
parser.add_argument("--duty_cycle",  type=float, default=0.5, help="duty cycle between 0 and 1")

args = parser.parse_args()

led = gpiod.Chip("/dev/gpiochip0").get_line_info(40)
if led.consumer != "heartbeat":
	led.release()
	sys.exit(1)

trigger = open("/sys/class/leds/heartbeat/trigger", "r")
triggers = trigger.read()
trigger.close()
if "[heartbeat]" in triggers:
	if "timer" in triggers:
		trigger = open("/sys/class/leds/heartbeat/trigger", "w")
		trigger.write("timer")
		trigger.close()
		delay_on = open("/sys/class/leds/heartbeat/delay_on", "w")
		delay_on.write(str(int(1000 * args.duty_cycle / args.frequency)))
		delay_on.close()
		delay_off = open("/sys/class/leds/heartbeat/delay_off", "w")
		delay_off.write(str(int(1000 * (1 - args.duty_cycle) / args.frequency)))
		delay_off.close()
	else:
	    print("module ledtrig-timer not loaded")
	    sys.exit(1)
elif "[timer]" in triggers:
	if "heartbeat" in triggers:
		trigger = open("/sys/class/leds/heartbeat/trigger", "w")
		trigger.write("heartbeat")
		trigger.close()
	else:
		print("module ledtrig-heartbeat not loaded")
		sys.exit(1)
